// Generated by CoffeeScript 2.4.1
(function() {
  var CLI, Spinner, c, checkDirectoryExists, fs, inquirer, log, pathModule, pathhandlermodule, utl;

  pathhandlermodule = {
    name: "pathhandlermodule"
  };

  //region node_modules
  inquirer = require("inquirer");

  c = require('chalk');

  CLI = require('clui');

  Spinner = CLI.Spinner;

  fs = require("fs-extra");

  pathModule = require("path");

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathhandlermodule"] != null) {
      console.log("[pathhandlermodule]: " + arg);
    }
  };

  //region internal variables
  utl = null;

  //endregion

  //region exposed variables
  pathhandlermodule.keysDirectory = "";

  pathhandlermodule.configPath = "";

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  pathhandlermodule.initialize = function() {
    log("pathhandlermodule.initialize");
    return utl = allModules.utilmodule;
  };

  //region internal functions
  checkDirectoryExists = async function(path) {
    var err, stats;
    try {
      stats = (await fs.lstat(path));
      return stats.isDirectory();
    } catch (error) {
      err = error;
      // console.log(c.red(err.message))
      return false;
    }
  };

  //endregion

  //region exposed functions
  pathhandlermodule.setKeysDirectory = async function(keysDir) {
    var exists;
    if (keysDir) {
      if (pathModule.isAbsolute(keysDir)) {
        pathhandlermodule.keysDirectory = keysDir;
      } else {
        pathhandlermodule.keysDirectory = pathModule.resolve(process.cwd(), keysDir);
      }
    } else {
      throw "Trying to set undefined or empty directory for the keys.";
    }
    exists = (await checkDirectoryExists(pathhandlermodule.keysDirectory));
    if (!exists) {
      throw new Error("Provided directory " + keysDir + " does not exist!");
    }
  };

  pathhandlermodule.setConfigFilePath = function(configPath) {
    if (configPath) {
      if (pathModule.isAbsolute(configPath)) {
        return pathhandlermodule.configPath = configPath;
      } else {
        return pathhandlermodule.configPath = pathModule.resolve(process.cwd(), configPath);
      }
    } else {
      throw "Trying to set undefined or empty directory for the keys.";
    }
  };

  pathhandlermodule.getConfigRequirePath = function() {
    return pathhandlermodule.configPath;
  };

  pathhandlermodule.getPrivKeyPath = function(repo) {
    return pathModule.resolve(pathhandlermodule.keysDirectory, repo);
  };

  pathhandlermodule.getPubKeyPath = function(repo) {
    return pathModule.resolve(pathhandlermodule.keysDirectory, repo + ".pub");
  };

  //endregion
  module.exports = pathhandlermodule;

}).call(this);
