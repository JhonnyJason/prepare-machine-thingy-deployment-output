// Generated by CoffeeScript 2.5.1
(function() {
  var cfg, checkDirectoryExists, checkDirectoryIsInGit, checkSomethingExists, err, exec, execGitCheckPromise, fs, homedir, log, olog, os, ostr, pathModule, pathhandlermodule, prepareUserConfigPath, resolveHomeDir, specifics, thingyName, utl;

  pathhandlermodule = {
    name: "pathhandlermodule"
  };

  //###########################################################
  //region logPrintFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathhandlermodule"] != null) {
      console.log("[pathhandlermodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  //endregion

  //###########################################################
  //region modulesFromEnvironment
  //###########################################################
  //region node_modules
  fs = require("fs-extra");

  pathModule = require("path");

  os = require("os");

  exec = require("child_process").exec;

  //endregion

  //###########################################################
  //region localModules
  utl = null;

  cfg = null;

  //endregion
  //endregion

  //###########################################################
  //region internalProperties
  homedir = os.homedir();

  thingyName = "";

  try {
    specifics = require("./pathhandlerspecifics");
  } catch (error1) {
    err = error1;
  }

  //endregion

  //###########################################################
  pathhandlermodule.initialize = async function() {
    log("pathhandlermodule.initialize");
    Object.assign(pathhandlermodule, specifics);
    utl = allModules.utilmodule;
    cfg = allModules.configmodule;
    await prepareUserConfigPath();
  };

  //###########################################################
  //region internalFunctions
  execGitCheckPromise = function(path) {
    var options;
    options = {
      cwd: path
    };
    return new Promise(function(resolve, reject) {
      var callback;
      callback = function(error, stdout, stderr) {
        if (error) {
          reject(error);
        }
        if (stderr) {
          reject(new Error(stderr));
        }
        return resolve(stdout);
      };
      return exec("git rev-parse --is-inside-work-tree", options, callback);
    });
  };

  prepareUserConfigPath = async function() {
    var dirPath, filePath;
    log("prepareUserConfigPath");
    filePath = resolveHomeDir(cfg.cli.userConfigPath);
    dirPath = pathModule.dirname(filePath);
    await fs.mkdirp(dirPath);
    pathhandlermodule.userConfigPath = filePath;
  };

  resolveHomeDir = function(path) {
    log("resolveHomeDir");
    if (!path) {
      return;
    }
    if (path[0] === "~") {
      path = path.replace("~", homedir);
    }
    return path;
  };

  checkSomethingExists = async function(something) {
    try {
      await fs.lstat(something);
      return true;
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  checkDirectoryExists = async function(path) {
    var stats;
    try {
      stats = (await fs.lstat(path));
      return stats.isDirectory();
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  checkDirectoryIsInGit = async function(path) {
    try {
      await execGitCheckPromise(path);
      return true;
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  //endregion

  //###########################################################
  //region exposed
  //region exposedProperties
  pathhandlermodule.keysDirectory = "";

  pathhandlermodule.configPath = "";

  pathhandlermodule.homedir = homedir; //directory

  pathhandlermodule.userConfigPath = ""; //file

  pathhandlermodule.basePath = ""; //directory

  pathhandlermodule.thingyPath = ""; //directory

  pathhandlermodule.temporaryFilesPath = ""; //directory

  pathhandlermodule.recipesPath = "";

  //endregion

  //region exposedFunctions
  pathhandlermodule.setKeysDirectory = async function(keysDir) {
    var exists;
    if (keysDir) {
      if (pathModule.isAbsolute(keysDir)) {
        pathhandlermodule.keysDirectory = keysDir;
      } else {
        pathhandlermodule.keysDirectory = pathModule.resolve(process.cwd(), keysDir);
      }
    } else {
      throw "Trying to set undefined or empty directory for the keys.";
    }
    exists = (await checkDirectoryExists(pathhandlermodule.keysDirectory));
    if (!exists) {
      throw new Error("Provided directory " + keysDir + " does not exist!");
    }
  };

  pathhandlermodule.setConfigFilePath = function(configPath) {
    if (configPath) {
      if (pathModule.isAbsolute(configPath)) {
        return pathhandlermodule.configPath = configPath;
      } else {
        return pathhandlermodule.configPath = pathModule.resolve(process.cwd(), configPath);
      }
    } else {
      throw "Trying to set undefined or empty directory for the keys.";
    }
  };

  pathhandlermodule.getConfigRequirePath = function() {
    return pathhandlermodule.configPath;
  };

  pathhandlermodule.getPrivKeyPath = function(repo) {
    return pathModule.resolve(pathhandlermodule.keysDirectory, repo);
  };

  pathhandlermodule.getPubKeyPath = function(repo) {
    return pathModule.resolve(pathhandlermodule.keysDirectory, repo + ".pub");
  };

  pathhandlermodule.resolve = function(base, other) {
    log("pathhandlermodule.resolve");
    return pathModule.resolve(base, other);
  };

  pathhandlermodule.prepareBasePath = async function(providedPath) {
    var exists, isInGit;
    log("pathhandlermodule.checkBase");
    if (!providedPath) {
      providedPath = cfg.userConfig.defaultThingyRoot;
    }
    providedPath = resolveHomeDir(providedPath);
    if (pathModule.isAbsolute(providedPath)) {
      pathhandlermodule.basePath = providedPath;
    } else {
      pathhandlermodule.basePath = pathModule.resolve(process.cwd(), providedPath);
    }
    log("our basePath is: " + pathhandlermodule.basePath);
    //#sadly this case has gone ;( - it lives on in this comment
    // pathhandlermodule.basePath = process.cwd()
    exists = (await checkDirectoryExists(pathhandlermodule.basePath));
    if (!exists) {
      throw new Error("Provided directory does not exist!");
    }
    isInGit = (await checkDirectoryIsInGit(pathhandlermodule.basePath));
    if (isInGit) {
      throw new Error("Provided directory is already in a git subtree!");
    }
  };

  pathhandlermodule.prepareTemporaryFilesPath = function() {
    log("pathhandlermodule.prepareTemporaryFilesPath");
    pathhandlermodule.temporaryFilesPath = resolveHomeDir(cfg.userConfig.temporaryFiles);
  };

  pathhandlermodule.prepareRecipesPath = function() {
    log("pathhandlermodule.prepareRecipesPath");
    if (!cfg.userConfig.recipesPath) {
      cfg.userConfig.recipesPath = "~/.config/thingyBubble/recipes";
    }
    pathhandlermodule.recipesPath = resolveHomeDir(cfg.userConfig.recipesPath);
  };

  pathhandlermodule.ensureDirectoryExists = async function(directory) {
    var result;
    log("pathhandlermodule.ensureDirectoryExists");
    directory = resolveHomeDir(directory);
    result = (await fs.mkdirp(directory));
  };

  pathhandlermodule.somethingExistsAtBase = async function(name) {
    var something;
    something = pathModule.resolve(pathhandlermodule.basePath, name);
    return (await checkSomethingExists(something));
  };

  pathhandlermodule.directoryExistsAtBase = async function(dirName) {
    var dirPath;
    dirPath = pathModule.resolve(pathhandlermodule.basePath, dirName);
    return (await checkDirectoryExists(dirPath));
  };

  //endregion
  //endregion
  module.exports = pathhandlermodule;

}).call(this);
