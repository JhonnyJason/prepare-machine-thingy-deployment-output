// Generated by CoffeeScript 2.5.1
(function() {

  /* FYI:
  This module is to be injected into the pathhandlermodule
  At best keep it most minimal to the specifics of this cli
  We may use everything off the pathhandlermodule using @
  as @ = this. and this will be the pathhandlermodule
  */
  var pathModule, pathhandlerspecifics, print;

  pathhandlerspecifics = {};

  //###########################################################
  print = function(arg) {
    return console.log(arg);
  };

  pathModule = require("path");

  //###########################################################
  pathhandlerspecifics.keysDirectory = "";

  pathhandlerspecifics.configPath = "";

  //###########################################################
  pathhandlerspecifics.setKeysDirectory = async function(keysDir) {
    var exists;
    if (!keysDir) {
      throw new Error("No keysDir to set!");
    }
    if (pathModule.isAbsolute(keysDir)) {
      this.keysDirectory = keysDir;
    } else {
      this.keysDirectory = pathModule.resolve(process.cwd(), keysDir);
    }
    exists = (await this.directoryExists(this.keysDirectory));
    if (!exists) {
      throw new Error("Provided directory " + keysDir + " does not exist!");
    }
  };

  pathhandlerspecifics.setConfigFilePath = function(configPath) {
    if (!configPath) {
      throw new Error("No configPath to set!");
    }
    if (pathModule.isAbsolute(configPath)) {
      this.configPath = configPath;
      return;
    }
    this.configPath = pathModule.resolve(process.cwd(), configPath);
  };

  //###########################################################
  //region getterFunctions
  pathhandlerspecifics.getConfigRequirePath = function() {
    return this.configPath;
  };

  pathhandlerspecifics.getPrivKeyPath = function(repoName) {
    return pathModule.resolve(this.keysDirectory, repoName);
  };

  pathhandlerspecifics.getPubKeyPath = function(repoName) {
    return pathModule.resolve(this.keysDirectory, repoName + ".pub");
  };

  //endregion
  module.exports = pathhandlerspecifics;

}).call(this);
