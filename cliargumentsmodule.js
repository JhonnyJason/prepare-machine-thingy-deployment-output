// Generated by CoffeeScript 2.4.1
(function() {
  var cliargumentsmodule, extractMeowed, getHelpText, getOptions, log, meow, throwErrorOnUsageFail;

  cliargumentsmodule = {
    name: "cliargumentsmodule"
  };

  //region node_modules
  meow = require('meow');

  // minimistOptions = require("minimist-options")
  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cliargumentsmodule"] != null) {
      console.log("[cliargumentsmodule]: " + arg);
    }
  };

  //region internal variables

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  cliargumentsmodule.initialize = function() {
    return log("cliargumentsmodule.initialize");
  };

  //region internal functions
  getHelpText = function() {
    log("getHelpText");
    return "Usage\n    $ prepare-machine-thingy-deployment <arg1> <arg2> <arg3>\n    \nOptions\n    required:\n    arg1, --keys-directory <path/to/keys>, -k <path/to/keys>\n        path of directory where old keys are kept and the new ones will be stored\n    arg2, --machine-config <machine-config>, -c <machine-config>\n        path to file which if the machine-config\n    \n    optional:\n    arg3, --mode <mode>, -m <mode>  \n        \"prepare\" (default) - we keep old keys and add the missing ones - same holds for the webhooks\n        \"refresh\" - we remove all old keys and webhooks and add new ones\n        \"remove\" - well... aaaand it's gone, it's all gone!\nTO NOTE:\n    The flags will overwrite the flagless argument.\n\nExamples\n    $ prepare-machine-thingy-deployment keys allRepos refresh\n    ...";
  };

  getOptions = function() {
    log("getOptions");
    return {
      flags: {
        keysDirectory: {
          type: "string",
          alias: "k"
        },
        machineConfig: {
          type: "string",
          alias: "c"
        },
        mode: {
          type: "string",
          alias: "m",
          default: "prepare"
        }
      }
    };
  };

  extractMeowed = function(meowed) {
    var keysDirectory, machineConfig, mode;
    log("extractMeowed");
    keysDirectory = "";
    machineConfig = "";
    mode = "prepare";
    if (meowed.input[0]) {
      keysDirectory = meowed.input[0];
    }
    if (meowed.input[1]) {
      machineConfig = meowed.input[1];
    }
    if (meowed.input[2]) {
      mode = meowed.input[2];
    }
    if (meowed.flags.keysDirectory) {
      keysDirectory = meowed.flags.keysDirectory;
    }
    if (meowed.flags.machineConfig) {
      machineConfig = meowed.flags.machineConfig;
    }
    if (meowed.flags.mode) {
      mode = meowed.flags.mode;
    }
    return {keysDirectory, machineConfig, mode};
  };

  throwErrorOnUsageFail = function(extract) {
    log("throwErrorOnUsageFail");
    if (!extract.keysDirectory) {
      throw "Usage error: obligatory option keysDirectory was not provided!";
    }
    if (!extract.machineConfig) {
      throw "Usage error: obligatory option machineConfig was not provided!";
    }
    if (!(typeof extract.keysDirectory === "string")) {
      throw "Usage error: option keysDirectory was provided in an unexpected way!";
    }
    if (!(typeof extract.machineConfig === "string")) {
      throw "Usage error: option machineConfig was provided in an unexpected way!";
    }
    if (!(typeof extract.mode === "string")) {
      throw "Usage error: option mode was provided in an unexpected way!";
    }
  };

  //endregion

  //region exposed functions
  cliargumentsmodule.extractArguments = function() {
    var extract, meowed, options;
    log("cliargumentsmodule.extractArguments");
    options = getOptions();
    meowed = meow(getHelpText(), getOptions());
    extract = extractMeowed(meowed);
    throwErrorOnUsageFail(extract);
    return extract;
  };

  //endregion exposed functions
  module.exports = cliargumentsmodule;

}).call(this);
