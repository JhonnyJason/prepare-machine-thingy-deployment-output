// Generated by CoffeeScript 2.5.1
(function() {
  var CLI, Spinner, api, authQuestions, c, connectAPI, githubAPI, githubhandlermodule, inquirer, log;

  githubhandlermodule = {
    name: "githubhandlermodule"
  };

  githubAPI = require("github-api");

  inquirer = require("inquirer");

  c = require("chalk");

  CLI = require('clui');

  Spinner = CLI.Spinner;

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["githubhandlermodule"] != null) {
      console.log("[githubhandlermodule]: " + arg);
    }
  };

  //region internal variables
  api = null;

  authQuestions = [
    {
      name: "username",
      type: "input",
      message: "Github username:",
      validate: function(value) {
        if (value.length) {
          return true;
        } else {
          return 'Please!';
        }
      }
    },
    {
      name: "password",
      type: "password",
      message: "Github password:",
      validate: function(value) {
        if (value.length) {
          return true;
        } else {
          return 'Please!';
        }
      }
    }
  ];

  //endregion

  //region exposed variables
  githubhandlermodule.user = "";

  githubhandlermodule.password = "";

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  githubhandlermodule.initialize = function() {
    return log("githubhandlermodule.initialize");
  };

  
  //region internal functions
  connectAPI = async function() {
    var answers, authenticated, err, options, profile, results, status, user;
    authenticated = false;
    results = [];
    while (!authenticated) {
      answers = (await inquirer.prompt(authQuestions));
      status = new Spinner('Checking credentials...');
      options = {
        username: answers.username,
        password: answers.password
      };
      try {
        status.start();
        api = new githubAPI(options);
        user = api.getUser();
        profile = (await user.getProfile());
        // console.log "\n" + JSON.stringify profile.data
        console.log(c.green("Credentials Check succeeded!"));
        githubhandlermodule.user = answers.username;
        githubhandlermodule.password = answers.password;
        results.push(authenticated = true);
      } catch (error) {
        err = error;
        results.push(console.log(c.red("Credentials Check failed!")));
      } finally {
        status.stop();
      }
    }
    return results;
  };

  //endregion

  //region exposed fun
  githubhandlermodule.buildConnection = async function() {
    if (api === null) {
      return (await connectAPI());
    }
  };

  githubhandlermodule.addWebhook = async function(repo, url, secret) {
    var config, repoHandle, webhookDescription;
    log("githubhandlermodule.addWebhook");
    repoHandle = api.getRepo(githubhandlermodule.user, repo);
    config = {
      url: url,
      content_type: "json",
      secret: secret
    };
    webhookDescription = {
      name: "web",
      active: true,
      events: ["push"],
      config: config
    };
    return (await repoHandle.createHook(webhookDescription));
  };

  githubhandlermodule.removeWebhook = async function(repo, url) {
    var allHooks, hook, i, id, idsToDelete, len, promises, repoHandle, result;
    log("githubhandlermodule.getWebhook");
    repoHandle = api.getRepo(githubhandlermodule.user, repo);
    result = (await repoHandle.listHooks());
    allHooks = result.data;
    idsToDelete = [];
    for (i = 0, len = allHooks.length; i < len; i++) {
      hook = allHooks[i];
      if (hook.config.url === url) {
        idsToDelete.push(hook.id);
      }
    }
    promises = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = idsToDelete.length; j < len1; j++) {
        id = idsToDelete[j];
        results.push(repoHandle.deleteHook(id));
      }
      return results;
    })();
    await Promise.all(promises);
  };

  githubhandlermodule.addDeployKey = async function(repo, key, title) {
    var keyDescription, repoHandle;
    log("githubhandlermodule.addDeployKey");
    repoHandle = api.getRepo(githubhandlermodule.user, repo);
    keyDescription = {
      title: title,
      key: key,
      read_only: true
    };
    return (await repoHandle.createKey(keyDescription));
  };

  githubhandlermodule.removeDeployKey = async function(repo, title) {
    var allKeys, i, id, idsToDelete, key, len, promises, repoHandle, result;
    log("githubhandlermodule.removeDeployKey");
    repoHandle = api.getRepo(githubhandlermodule.user, repo);
    result = (await repoHandle.listKeys());
    allKeys = result.data;
    idsToDelete = [];
    for (i = 0, len = allKeys.length; i < len; i++) {
      key = allKeys[i];
      if (key.title === title) {
        idsToDelete.push(key.id);
      }
    }
    promises = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = idsToDelete.length; j < len1; j++) {
        id = idsToDelete[j];
        results.push(repoHandle.deleteKey(id));
      }
      return results;
    })();
    await Promise.all(promises);
  };

  
  //endregion
  module.exports = githubhandlermodule;

}).call(this);
